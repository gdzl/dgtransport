<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
	      http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
	      http://www.springframework.org/schema/context
	      http://www.springframework.org/schema/context/spring-context-4.2.xsd
	      http://www.springframework.org/schema/aop
	      http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
	      http://www.springframework.org/schema/tx
	      http://www.springframework.org/schema/tx/spring-tx-4.2.xsd">

    <context:component-scan base-package="com.paxonpilot.dgtransport"/>
    <context:annotation-config/>

    <!-- 读取mysql jdbc的配置-->
    <context:property-placeholder location="classpath:jdbc.properties" />
    <!-- 配置数据源，从上面配置文件读取-->
    <bean id="dataSource"
          class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
        <property name="driverClass" value="${driverClassName}"/>
        <property name="jdbcUrl" value="${url}"/>
        <property name="user" value="${jdbcusername}"/>
        <property name="password" value="${jdbcpassword}"/>
        <property name="initialPoolSize" value="${initialPoolSize}"/>
        <property name="minPoolSize" value="${minPoolSize}"/>
        <property name="maxPoolSize" value="${maxPoolSize}"/>
        <property name="maxIdleTime" value="${maxIdleTime}"/>
        <property name="acquireIncrement" value="${acquireIncrement}"/> 
    </bean>

    <!-- 配置session factory，hibernate4 直接改为localsession，也是从上面的配置文件读取-->
    <bean id="sessionFactory"
          class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.dialect">${hibernate_dialect}</prop>
                <prop key="hibernate.show_sql">${hibernate_show_sql}</prop>
                <prop key="hibernate.format_sql">${hibernate_format_sql}</prop>
                <prop key="hibernate.jdbc.batch_size">${hibernate_batch_size}</prop>
                <prop key="hibernate.hbm2ddl.auto">${hibernate_autocreate}</prop>
            </props>
        </property>
        <property name="packagesToScan">
        	<list>
				<value>com.paxonpilot.dgtransport.entity</value>
			</list>
        </property>
    </bean>
    
    <bean id="hibernateTemplate" 
    	  class="org.springframework.orm.hibernate4.HibernateTemplate">
    	<property name="sessionFactory" ref="sessionFactory" />
    </bean>
    	

    <!-- 配置事务管理器 -->
    <bean id="txManager"
          class="org.springframework.orm.hibernate4.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory" />
    </bean>

    <!-- 配置事务异常封装-->
    <bean id="persistenceExceptionTranslationPostProcessor"
          class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor"/>

    <!-- 声明式容器事务管理-->
    <!--hibernate4必须配置为开启事务 否则 getCurrentSession()获取不到-->
    <tx:advice id="txAdvice" transaction-manager="txManager">
        <tx:attributes>
            <tx:method name="add*" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="update*" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="save*" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="get*" propagation="REQUIRED" read-only="true" />
            <tx:method name="find*" propagation="REQUIRED" read-only="true" />
        </tx:attributes>
    </tx:advice>
    <aop:aspectj-autoproxy proxy-target-class="true"/>
    <!-- --> 
    <aop:config expose-proxy="true">
        <aop:pointcut id="txPointcut" expression="execution(* com.paxonpilot.dgtransport.*service.*(..))" />
        <aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut"/>
    </aop:config>
    
    
	<!-- 定时任务 -->
	<bean id="epJob" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean"
		p:targetObject-ref="taskSerivce"
		p:targetMethod="doEnterpriseJob"
	/>
	
	<bean id="epJobTrigger"  
        class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">  
        <property name="jobDetail">  
            <ref bean="epJob" />  
        </property>  
        <property name="cronExpression">  
            <value>0 0/1 * * * ?</value>  
        </property>  
    </bean> 
    
    <bean id="carJob" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean"
		p:targetObject-ref="taskSerivce"
		p:targetMethod="doCarJob"
	/>
	
	<bean id="carJobTrigger"  
        class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">  
        <property name="jobDetail">  
            <ref bean="carJob" />  
        </property>  
        <property name="cronExpression">  
            <value>0 0/1 * * * ?</value>  
        </property>  
    </bean>
    
    <bean id="empJob" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean"
		p:targetObject-ref="taskSerivce"
		p:targetMethod="doEmpJob"
	/>
	
	<bean id="empJobTrigger"  
        class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">  
        <property name="jobDetail">  
            <ref bean="empJob" />  
        </property>  
        <property name="cronExpression">  
            <value>0 0/1 * * * ?</value>  
        </property>  
    </bean>
    
    <bean id="epDeadLineJob" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean"
		p:targetObject-ref="taskSerivce"
		p:targetMethod="doEnterpriseDeadLineJob"
	/>
	
	<bean id="epDeadLineJobTrigger"  
        class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">  
        <property name="jobDetail">  
            <ref bean="epDeadLineJob" />  
        </property>  
        <property name="cronExpression">  
            <value>0 0/1 * * * ?</value>  
        </property>  
    </bean>
    
    <bean id="carDeadLineJob" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean"
		p:targetObject-ref="taskSerivce"
		p:targetMethod="doCarDeadLineJob"
	/>
	
	<bean id="carDeadLineJobTrigger"  
        class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">  
        <property name="jobDetail">  
            <ref bean="carDeadLineJob" />  
        </property>  
        <property name="cronExpression">  
            <value>0 0/1 * * * ?</value>  
        </property>  
    </bean>
    
    <bean id="empDeadLineJob" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean"
		p:targetObject-ref="taskSerivce"
		p:targetMethod="doEmpDeadLineJob"
	/>
	
	<bean id="empDeadLineJobTrigger"  
        class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">  
        <property name="jobDetail">  
            <ref bean="empDeadLineJob" />  
        </property>  
        <property name="cronExpression">  
            <value>0 0/1 * * * ?</value>  
        </property>  
    </bean>
    
    <bean name="startQuertz" lazy-init="false" autowire="no"  
        class="org.springframework.scheduling.quartz.SchedulerFactoryBean">  
        <property name="triggers">  
            <list>  
                <ref bean="epJobTrigger" />
                <ref bean="carJobTrigger" />
                <ref bean="empJobTrigger" />
                <ref bean="epDeadLineJobTrigger" />
                <ref bean="carDeadLineJobTrigger" />
                <ref bean="empDeadLineJobTrigger" /> 
            </list>  
        </property>  
    </bean>



</beans>